procedure main()
    int node_size = 9
    //represents the graph as an adjacency list, G has the edges and weight, nodes has start index and parent
    int G[28][2] = {{2,4}, {8,8}, {1,4}, {3,8}, {8,11}, {2,8}, {4,7}, {6,4}, {9,2}, {3,7}, {5,9}, {6,14},{4,9},{6,10},{3,4},{4,14},{5,10},{7,2},{6,2},{8,1},{9,6},{1,8},{2,11},{7,1},{9,7},{3,2},{7,6},{8,7}}
    int nodes[node_size][3] = {{0}, {2}, {5}, {9}, {12}, {14} ,{18}, {21}, {25}}
    int s = 1
    //nodes and the values, index from 1...
    int queue[node_size+1][2] = {{0}}
    //garbage
    int extractgarbage[node_size][2] = {{0}}
    int decreasegarbage[node_size*node_size/2][3] = {{0}}
    int relexgarbage[node_size*node_size/2][3] = {{0}}
    int relaxcounter = 0
    
    call dijkstra(G, nodes, s, queue, decreasegarbage, extractgarbage, relexgarbage, relaxcounter)
    
procedure dijkstra(int G[], int nodes[], int s, int queue[], int decreasegarbage[], int extractgarbage[], int relexgarbage[], int relaxcounter)
    local int queuesize = size(queue) - 1, int extractcounter = 0
    call initialize(nodes, s)
    call initialize_queue(queue, s)
    
    from queuesize = size(queue)-1 do
        local int u = 0, int adjsize = 0
        call extractmin(queue, queuesize, u, extractgarbage, extractcounter)
        //get the current node of adjacent nodes
        call getadjsize(u, nodes, G, adjsize)
        local int adjlist[adjsize] = {0}
        call getlist(G, nodes, u-1, adjlist)      
        
        //update the key value of the remainder in the minimum queue
        local int i = 0
        from i = 0 do
            if queuesize != 0 then
                local int weight = G[nodes[u-1][0]+i][1]
                call relax(u, adjlist[i], nodes, weight, decreasegarbage, queue, queuesize, relexgarbage, relaxcounter)
                delocal int weight = G[nodes[u-1][0]+i][1]
            fi queuesize != 0
            i += 1  
        until i = size(adjlist)
        delocal int i = size(adjlist)
        
        uncall getlist(G, nodes, u-1, adjlist)
        delocal int adjlist[adjsize] = {0}
        uncall getadjsize(u, nodes, G, adjsize)
        delocal int u = queue[queuesize+1][0], int adjsize = 0
    until queuesize = 0
    
    delocal int queuesize = 0, int extractcounter = size(nodes)

//all nodes and distance in queue, all parent of nodes are -1
procedure initialize_queue(int queue[], int s)
    local int i = 2, int n = 1
    queue[1][0] += s
    from i = 2 do
        if i = s + 1 then
            n += 1
        fi i = s + 1
        queue[i][0] += n                    //initialize node number code
        queue[i][1] += 4294967295           //the least distance is infinity
        n += 1
        i += 1
    until i = size(queue)
    delocal int i = size(queue), int n = size(queue)

procedure initialize(int nodes[], int s)
    local int i = 2
    nodes[0][1] -= 1
    from i = 2 do
        nodes[i-1][1] -= 1                           //no parent node
        nodes[i-1][2] += 4294967295
        i += 1
    until i = size(nodes) + 1
    delocal int i = size(nodes) + 1
    
procedure relax(int u, int v, int nodes[], int weight, int decreasegarbage[], int queue[], int queuesize, int relexgarbage[], int relaxcounter)
    //isinqueue
    local int i = 0
    from i = 0 do
        if queue[i+1][0] = v then
            relexgarbage[relaxcounter][0] += i + 1
            relaxcounter += 1
        fi queue[i+1][0] = v
        i += 1
    until i = queuesize
    
    
    if nodes[v-1][2] >= nodes[u-1][2] + weight then
        nodes[v-1][2] <=> relexgarbage[relaxcounter-1][2]
        call decreasekey(queue, relexgarbage[relaxcounter-1][0], nodes[u-1][2] + weight, decreasegarbage, relaxcounter-1, nodes, v)
        nodes[v-1][1] <=> relexgarbage[relaxcounter-1][1]
        nodes[v-1][1] += u
    fi nodes[v-1][2] = nodes[u-1][2] + weight
    delocal int i = queuesize
    
procedure getadjsize(int u, int nodes[], int G[], int return)
    if u < size(nodes) then
        return += nodes[u][0]-nodes[u-1][0]
    else
        return += size(G)-nodes[u-1][0]
    fi u < size(nodes)
    
procedure getlist(int G[], int nodes[], int i, int res[])
    // end contains a pointer to the end of the wanted list
    local int end = 0
    if i = (size(nodes) - 1) then
        // If we try to get the last list we stop at the end of the element list
        end += size(G)
    else
        // Or else, we stop where the next list starts
        end += nodes[i + 1][0]
    fi i = (size(nodes) - 1)
    // All elements of the wanted list are loaded into res
    
    local int r = nodes[i][0]
    from r = nodes[i][0] do
        res[r - nodes[i][0]] += G[r][0]
        r += 1
    until r = end
    
    delocal int r = end
    
    // end is delocated
    if i = (size(nodes) - 1) then
        end -= size(G)
    else
        end -= nodes[i + 1][0]
    fi i = (size(nodes) - 1)
    delocal int end = 0
    
procedure extractmin(int A[], int heapsize, int min, int heapgarbage[],int extractcount)
    if heapsize < 1 then
        error("Heap underflow")
    fi heapsize < 1
    
    // Extract minimum element
    min += A[1][0]

    //swap minimum element with the final element of the heap
    A[1][0] <=> A[heapsize][0]
    A[1][1] <=> A[heapsize][1]
    // Decrease size of heap
    heapsize -= 1
    // Call minheapify to preserve minimum heap property
    heapgarbage[extractcount][1] += 1
    call minheapify(A, heapsize, 1, heapgarbage, extractcount)
    extractcount += 1
    
procedure parent(int i, int parent)
    parent += i / 2

procedure left(int i, int left)
    left += 2 * i

procedure right(int i, int right)
    right += 2 * i + 1
    
procedure decreasekey(int A[], int i, int key, int heapgarbage[], int count, int nodes[], int v)
    local int tmp = i
    if key > A[i][1] then
        error("New key is bigger than current key")
    fi key > A[i][1]
    
    heapgarbage[count][0] += A[i][1] - key
    A[i][1] -= heapgarbage[count][0]
    nodes[v-1][2] += A[i][1] 
    heapgarbage[count][2] += 1
    heapgarbage[count][1] += i
    
    local int loopcond = 1
    from loopcond = 1 && heapgarbage[count][2] = 1 do
        local int parent = 0
        call parent(tmp, parent)
        if tmp <= 1 || A[parent][1] <= A[tmp][1] then
            loopcond -= 1
        else
            A[tmp][0] <=> A[parent][0]
            A[tmp][1] <=> A[parent][1]
            tmp -= heapgarbage[count][1] / heapgarbage[count][2]
            tmp += parent
        fi loopcond = 0
        
        uncall parent(heapgarbage[count][1]/heapgarbage[count][2], parent)
        local int temp = heapgarbage[count][2]
        heapgarbage[count][2] += temp
        delocal int temp = heapgarbage[count][2] / 2
        delocal int parent = 0
    until loopcond = 0
    delocal int loopcond = 0
    delocal int tmp = heapgarbage[count][1]/(heapgarbage[count][2]/2)

procedure minheapify(int A[], int heapsize, int i,int heapgarbage[],int extractcount)
    local int left = 0, int right = 0, int min = 0
    call left(i, left)
    call right(i, right)
     
    if left <= heapsize && A[left][1] < A[i][1] then
        min += left
        if right <= heapsize && A[right][1] < A[min][1] then
            min -= left
            min += right
        fi right <= heapsize && A[right][1] < A[left][1]
    else
        min += i
        if right <= heapsize && A[right][1] < A[min][1] then
            min -= i
            min += right
        fi right <= heapsize && A[right][1] < A[i][1]
    fi left <= heapsize && A[left][1] < A[i][1]

    if min != i then
        A[i][0] <=> A[min][0]
        A[i][1] <=> A[min][1]
        call minheapify(A, heapsize, min, heapgarbage, extractcount)
    else
        heapgarbage[extractcount][0] += min
    fi min != i
    
    if min != i then
        if heapgarbage[extractcount][0] / 2 = i && heapgarbage[extractcount][0] % 2 = 1 then
            min -= 1
        fi heapgarbage[extractcount][0] / 2 = i && heapgarbage[extractcount][0] % 2 = 1
        
        if heapgarbage[extractcount][0] % 2 = 0 then
            min -= heapgarbage[extractcount][0]  / heapgarbage[extractcount][1]
        else
            min -= (heapgarbage[extractcount][0]-1) / heapgarbage[extractcount][1]
        fi heapgarbage[extractcount][0] % 2 = 0
        
        local int temp = heapgarbage[extractcount][1]
        heapgarbage[extractcount][1] += temp
        delocal int temp = heapgarbage[extractcount][1] / 2
    fi min = 0
    
    //show(heapgarbage)
    if i = heapgarbage[extractcount][0] then
        min -= heapgarbage[extractcount][0]
    fi i = heapgarbage[extractcount][0]
    
    uncall right(i, right)
    uncall left(i, left)
    delocal int left = 0, int right = 0, int min = 0
