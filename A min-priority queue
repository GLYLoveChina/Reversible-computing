1. An example of the whole reversible minheapify function
procedure main()
    int A[8] = {0,12,2,1,11,5,7,9}
    int heapsize = 7
    int lastindex = 0
    int pow = 1

    int i = 1
    call minheapify(A,heapsize,i,lastindex,pow)

procedure minheapify(int A[], int heapsize, int i,int lastindex,int pow)
    local int left = 0, int right = 0, int min = 0
    call left(i, left)
    call right(i, right)
    
    //Find the smallest note between i and the children of i
    if left <= heapsize && A[left] < A[i] then
        min += left
        if right <= heapsize && A[right] < A[min] then
            min -= left
            min += right
        fi right <= heapsize && A[right] < A[left]
    else
        min += i
        if right <= heapsize && A[right] < A[min] then
            min -= i
            min += right
        fi right <= heapsize && A[right] < A[i]
    fi left <= heapsize && A[left] < A[i]

    //if i isn't the smallest element, switch and call minheapify recursively
    if min != i then
        A[i] <=> A[min]
        call minheapify(A, heapsize, min, lastindex,pow)
    else
        lastindex += min
    fi min != i

    //set the current min to 0
    if min != i then
        if lastindex / 2 = i && lastindex % 2 = 1 then
            min -= 1
        fi lastindex / 2 = i && lastindex % 2 = 1
        
        if lastindex % 2 = 0 then
            min -= lastindex / pow
        else
            min -= (lastindex-1) / pow
        fi lastindex % 2 = 0
        local int tmp = pow * 2
        tmp <=> pow
        delocal int tmp = pow / 2
    fi min = 0
    
    if i = lastindex then
        min -= lastindex
    fi i = lastindex
    
    uncall right(i, right)
    uncall left(i, left)
    delocal int left = 0, int right = 0, int min = 0
    
procedure left(int i, int left)
    left += 2 * i

procedure right(int i, int right)
    right += 2 * i + 1

2. An example of the whole reversible extractmin function
procedure main()
    int A[] = {0, 1, 2, 3, 7, 4, 8, 9}
    int heapsize = size(A) - 1
    int last_index = 0
    int pow = 1

    int min = 0
    call extractmin(A, heapsize, min, last_index, pow)

procedure extractmin(int A[], int heapsize, int min, int last_index, int pow)
    if heapsize < 1 then
        error("Heap underflow")
    fi heapsize < 1
    
    // Extract minimum element
    min += A[1]
    A[1] -= min
    A[1] += 4294967295
    
    // Swap minimum element with the final element of the heap
    A[1] <=> A[heapsize]
    // Decrease size of heap
    heapsize -= 1
    
    // Call minheapify to preserve minimum heap property
    call minheapify(A, heapsize, 1, last_index, pow)
    
procedure minheapify(int A[], int heapsize, int i,int lastindex,int pow)
    local int left = 0, int right = 0, int min = 0
    call left(i, left)
    call right(i, right)
    
    //Find the smallest note between i and the children of i
    if left <= heapsize && A[left] < A[i] then
        min += left
        if right <= heapsize && A[right] < A[min] then
            min -= left
            min += right
        fi right <= heapsize && A[right] < A[left]
    else
        min += i
        if right <= heapsize && A[right] < A[min] then
            min -= i
            min += right
        fi right <= heapsize && A[right] < A[i]
    fi left <= heapsize && A[left] < A[i]

    //if i isn't the smallest element, switch and call minheapify recursively
    if min != i then
        A[i] <=> A[min]
        call minheapify(A, heapsize, min, lastindex,pow)
    else
        lastindex += min
    fi min != i

    //set the current min to 0
    if min != i then
        if lastindex / 2 = i && lastindex % 2 = 1 then
            min -= 1
        fi lastindex / 2 = i && lastindex % 2 = 1
        
        if lastindex % 2 = 0 then
            min -= lastindex / pow
        else
            min -= (lastindex-1) / pow
        fi lastindex % 2 = 0
        local int tmp = pow * 2
        tmp <=> pow
        delocal int tmp = pow / 2
    fi min = 0
    
    if i = lastindex then
        min -= lastindex
    fi i = lastindex
    
    uncall right(i, right)
    uncall left(i, left)
    delocal int left = 0, int right = 0, int min = 0
    
procedure left(int i, int left)
    left += 2 * i

procedure right(int i, int right)
    right += 2 * i + 1

3. An example of the whole reversible decreasekey function
procedure main()
    int A[] = {0,2,4,5,11,6,7,9}
    int heapsize = size(A) - 1
    int differ = 0
    int last_index = 0
    int pow = 1
    
    int i = 7
    int key = 3
    last_index += i
    call decreasekey(A,i,key,last_index,pow,differ)
    
procedure decreasekey(int A[], int i, int key, int last_index,int pow,int differ)
    local int tmp = i
    if key > A[i] then
        error("New key is bigger than current key")
    fi key > A[i]
    
    //save the difference between the current key and the new key
    differ += A[i] - key
    A[i] -= differ    //subtracts the difference from the current key
    
    //check if we have reached the root node, 
    //or if the node is larger than its parent node
    local int loopcond = 1
    from loopcond = 1 && pow = 1 do
        local int parent = 0
        call parent(tmp, parent)
        
        if tmp <= 1 || A[parent] <= A[tmp] then
            loopcond -= 1   //if yes, exit the loop using the loop condition
        else
            A[tmp] <=> A[parent]
            tmp -= last_index / pow
            tmp += parent
        fi loopcond = 0
        
        uncall parent(last_index/pow, parent)
        local int temp = pow
        pow += temp
        delocal int temp = pow / 2
        delocal int parent = 0
    until loopcond = 0
    delocal int loopcond = 0
    delocal int tmp = last_index/(pow/2)
    
procedure parent(int i, int parent)
    parent += i / 2
